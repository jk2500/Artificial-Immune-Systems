import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics.pairwise import euclidean_distances

# Step 1: Generate a Dataset
X, y = make_classification(n_samples=500, n_features=2, n_informative=2, n_redundant=0, 
                           n_clusters_per_class=1, weights=[0.99], flip_y=0, random_state=1)

# Adding some anomalous data
rng = np.random.default_rng(seed=42)
anomalous_data = rng.uniform(low=-3, high=0, size=(50, 2))
X = np.vstack([X, anomalous_data])
y = np.hstack([y, np.ones(anomalous_data.shape[0])])

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Visualize the dataset
plt.figure(figsize=(10, 6))
plt.scatter(X_train[y_train == 0][:, 0], X_train[y_train == 0][:, 1], label='Normal (Training)', alpha=0.6)
plt.scatter(X_test[y_test == 1][:, 0], X_test[y_test == 1][:, 1], label='Anomalous (Test)', c='red')
plt.title('Synthetic Dataset')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.show()



class RealValuedNegativeSelection:
    def __init__(self, radius):
        self.radius = radius
        self.detectors = None

    def fit(self, X_normal):
        self.detectors = []
        for _ in range(1000):  # Generate a fixed number of detectors
            candidate_detector = np.random.uniform(low=-3, high=3, size=X_normal.shape[1])
            distances = euclidean_distances(X_normal, candidate_detector.reshape(1, -1)).flatten()
            if np.all(distances > self.radius):
                self.detectors.append(candidate_detector)
            print(_)
        self.detectors = np.array(self.detectors)

    def predict(self, X):
        distances = euclidean_distances(X, self.detectors)
        predictions = np.any(distances <= self.radius, axis=1).astype(int)
        return predictions

# Initialize the RVNS model with a radius of 0.5
rvns_model = RealValuedNegativeSelection(radius=0.5)

# Train the model on the normal data
rvns_model.fit(X_train[y_train == 0])

# Evaluate the model on the test set
y_pred = rvns_model.predict(X_test)

# Generate a classification report
report = classification_report(y_test, y_pred, target_names=['Normal', 'Anomalous'])
print(report)


# Visualize the dataset along with the detectors
plt.figure(figsize=(10, 6))

# Plot normal and anomalous data points
plt.scatter(X_train[y_train == 0][:, 0], X_train[y_train == 0][:, 1], label='Normal (Training)', alpha=0.6)
plt.scatter(X_test[y_test == 1][:, 0], X_test[y_test == 1][:, 1], label='Anomalous (Test)', c='red')

# Plot the detectors generated by the RVNS algorithm
plt.scatter(rvns_model.detectors[:, 0], rvns_model.detectors[:, 1], label='Detectors', c='green', marker='x')

# Add a circle around each detector to visualize its radius
for detector in rvns_model.detectors:
    circle = plt.Circle(detector, rvns_model.radius, color='green', fill=False, linestyle='dashed')
    plt.gca().add_patch(circle)

plt.title('Synthetic Dataset with RVNS Detectors')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.grid(True)
plt.show()
    

